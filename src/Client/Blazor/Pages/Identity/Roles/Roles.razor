@page "/identity/roles"
@inject IRoleManager RoleManager
@inject NavigationManager Navigation

<PageTitle>Roles</PageTitle>

<MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">Add</MudButton>


<MudDataGrid Items="@roles" Bordered="true" Dense="true">
    <Columns>
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Description" />
        <TemplateColumn CellClass="d-flex justify-end" Title="Actions">
            <CellTemplate>
                <MudStack Row>
                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" OnClick=@(() => EditRole(context.Item.Id)) Color="@Color.Success">Details</MudButton>
                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" OnClick=@(() => DeleteRole(context.Item.Id)) Color="@Color.Error">Delete</MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    List<RoleDto> roles = [];

    protected override async Task OnInitializedAsync()
    {
        var result = await RoleManager.GetAllRoles();
        if (result.IsSuccess)
        {
            roles = result.Value!;
        }
        else
        {
            Console.WriteLine(string.Join("; ", result.Errors));
        }
    }

    void EditRole(Guid roleId) => Navigation.NavigateTo($"/identity/role/{roleId}");
    async Task DeleteRole(Guid roleId) => await RoleManager.DeleteRole(roleId);
}
